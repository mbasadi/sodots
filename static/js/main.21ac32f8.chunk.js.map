{"version":3,"sources":["actions/types.ts","utils/random_generator.ts","components/game.tsx","actions/sodos.ts","reducers/sodos.ts","utils/disign_arry.ts","reducers/index.ts","index.tsx"],"names":["ActionTypes","shuffleArray","array","i","length","j","Math","floor","random","style","background","padding","game","props","onKeyPressed","e","keyboardmove","SoDos","keyCode","setState","move","result","onItemClick","id","SoDo","selecteditem","onNewGameClick","newgame","state","bind","window","addEventListener","this","map","title","key","span","className","onKeyDown","event","gameBoard","type","onClick","React","Component","Game","connect","out","NEW_GAME","payload","difference","a","b","abs","ind","findIndex","element","winArray","push","SELECTED_ITEM","keypressedid","displacevalue","MOVE_ITEM","ini","m","n","array1","array2","sodoArray","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.21ac32f8.chunk.js","sourcesContent":["import { NewGameAction, SelectedItem, MoveItem } from './sodos';\n\nexport enum ActionTypes {\n  NEW_GAME,\n  SELECTED_ITEM,\n  MOVE_ITEM,\n}\n\nexport type Action = NewGameAction | SelectedItem | MoveItem;\n","const shuffleArray = (array: number[]): number[] => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nexport default shuffleArray;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Sodo, newgame, selecteditem, keyboardmove } from '../actions';\nimport { StoreState } from '../reducers';\nimport 'antd/dist/antd.css';\nimport { Button, Result, Col } from 'antd';\nimport '../assets/styles/game.scss';\nconst style = { background: '#023', padding: '8px 0' };\n\ninterface AppProps {\n  SoDos: Sodo;\n\n  newgame: typeof newgame;\n  selecteditem: typeof selecteditem;\n  keyboardmove: typeof keyboardmove;\n}\n\ninterface AppState {\n  move: number;\n  result: string;\n}\n\nclass game extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = { move: 0, result: 'Not Win Yet \"Kale Kiri\"' };\n    this.onKeyPressed = this.onKeyPressed.bind(this);\n  }\n  componentDidMount() {\n    window.addEventListener('keydown', this.onKeyPressed);\n  }\n\n  onKeyPressed = (e: any) => {\n    this.props.keyboardmove(this.props.SoDos, e.keyCode);\n    this.setState({ move: this.props.SoDos.move });\n    if (this.props.SoDos.result) {\n      this.setState({ result: 'You Win bitch' });\n    } else {\n      this.setState({ result: 'Not Win Yet \"Kale Kiri\"' });\n    }\n  };\n  onItemClick = (id: number, SoDo: Sodo): void => {\n    this.props.selecteditem(id - 1, SoDo);\n    this.setState({ move: this.props.SoDos.move });\n    if (this.props.SoDos.result) {\n      this.setState({ result: 'You Win bitch' });\n    } else {\n      this.setState({ result: 'Not Win Yet \"Kale Kiri\"' });\n    }\n  };\n  gameBoard(SoDo: Sodo): JSX.Element[] {\n    return this.props.SoDos.id.map((id) => {\n      if (SoDo.title[id - 1] !== 0) {\n        return (\n          <Col key={id} span={6}>\n            {SoDo.title[id - 1]}\n          </Col>\n        );\n      } else {\n        return (\n          <Col key={id} span={6} style={style}>\n            {' '}\n          </Col>\n        );\n      }\n    });\n  }\n  onNewGameClick = (SoDo: Sodo): void => {\n    this.props.newgame(SoDo);\n    this.setState({ move: 0 });\n  };\n  render() {\n    return (\n      <div>\n        <div\n          className=\"gameBoard\"\n          onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) =>\n            this.onKeyPressed(event)\n          }\n        >\n          {this.gameBoard(this.props.SoDos)}\n        </div>\n        <div className=\"game\">\n          <Button\n            type=\"primary\"\n            onClick={() => this.onNewGameClick(this.props.SoDos)}\n          >\n            NEW GAME\n          </Button>\n          <div>Move By Pofiu={this.state.move}</div>\n          <Result title={this.state.result} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ SoDos }: StoreState): { SoDos: Sodo } => {\n  return { SoDos };\n};\n\nexport const Game = connect(mapStateToProps, {\n  newgame,\n  selecteditem,\n  keyboardmove,\n})(game);\n","import { ActionTypes } from './types';\nimport shuffleArray from '../utils/random_generator';\n\nexport interface Sodo {\n  id: number[];\n  title: number[];\n  move: number;\n  result: boolean;\n}\n\nexport interface NewGameAction {\n  type: ActionTypes.NEW_GAME;\n  payload: Sodo;\n}\n\nexport interface SelectedItem {\n  type: ActionTypes.SELECTED_ITEM;\n  payload: Sodo;\n}\nexport interface MoveItem {\n  type: ActionTypes.MOVE_ITEM;\n  payload: Sodo;\n}\n\nexport const newgame = (SoDo: Sodo): NewGameAction => {\n  const title = shuffleArray(SoDo.title);\n\n  const out: Sodo = { id: SoDo.id, title: title, move: 0, result: false };\n  return {\n    type: ActionTypes.NEW_GAME,\n    payload: out,\n  };\n};\nexport const keyboardmove = (SoDo: Sodo, keypressedid: number): MoveItem => {\n  const isZeroTitle = (element: number) => element === 0;\n\n  const ind: number = SoDo.title.findIndex(isZeroTitle);\n\n  let displacevalue: number;\n  switch (keypressedid) {\n    case 37:\n      if (ind % 4 === 0) {\n        displacevalue = 0;\n      } else {\n        displacevalue = -1;\n      }\n      break;\n    case 38:\n      displacevalue = -4;\n      break;\n    case 39:\n      if (ind % 4 === 3) {\n        displacevalue = 0;\n      } else {\n        displacevalue = 1;\n      }\n      break;\n    case 40:\n      displacevalue = 4;\n      break;\n    default:\n      displacevalue = 0;\n  }\n\n  if (ind + displacevalue >= 0 && ind + displacevalue <= 15) {\n    SoDo.title[ind] = SoDo.title[ind + displacevalue];\n    SoDo.title[ind + displacevalue] = 0;\n    if (displacevalue !== 0) {\n      SoDo.move++;\n    }\n  }\n  let winArray: number[] = [];\n  for (let i = 0; i < SoDo.title.length; i++) {\n    winArray.push(i);\n  }\n  for (var i = 0; i < SoDo.title.length; i++) {\n    if (SoDo.title[i] !== winArray[i]) {\n      SoDo.result = false;\n      break;\n    } else {\n      SoDo.result = true;\n    }\n  }\n\n  return {\n    type: ActionTypes.MOVE_ITEM,\n    payload: SoDo,\n  };\n};\n\nexport const selecteditem = (id: number, SoDo: Sodo): SelectedItem => {\n  function difference(a: number, b: number): number {\n    return Math.abs(a - b);\n  }\n\n  const isZeroTitle = (element: number) => element === 0;\n  const ind: number = SoDo.title.findIndex(isZeroTitle);\n\n  if (difference(ind, id) === 1 || difference(ind, id) === 4) {\n    SoDo.title[ind] = SoDo.title[id];\n    SoDo.title[id] = 0;\n    SoDo.move++;\n    let winArray: number[] = [];\n\n    for (let i = 0; i < SoDo.title.length; i++) {\n      winArray.push(i);\n    }\n\n    if (SoDo.title === winArray) {\n      SoDo.result = true;\n    }\n\n    return {\n      type: ActionTypes.SELECTED_ITEM,\n      payload: SoDo,\n    };\n  }\n\n  return {\n    type: ActionTypes.SELECTED_ITEM,\n    payload: SoDo,\n  };\n};\n","import { Sodo, Action, ActionTypes } from '../actions';\nimport sodoArray from '../utils/disign_arry';\nconst ini = sodoArray(4, 4);\nexport const todosReducer = (state: Sodo = ini, action: Action) => {\n  switch (action.type) {\n    case ActionTypes.NEW_GAME:\n      return action.payload;\n    case ActionTypes.SELECTED_ITEM:\n      return action.payload;\n    case ActionTypes.MOVE_ITEM:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import { Sodo } from '../actions';\nimport shuffleArray from './random_generator';\nconst sodoArray = (m: number, n: number): Sodo => {\n  let array1: number[] = [];\n  let array2: number[] = [];\n  for (let i = 0; i < m * n; i++) {\n    array1.push(i + 1);\n    array2.push(i);\n  }\n  array2 = shuffleArray(array2);\n  const out = { id: array1, title: array2, move: 0, result: false };\n  return out;\n};\n\nexport default sodoArray;\n","import { combineReducers } from 'redux';\nimport { todosReducer } from './sodos';\nimport { Sodo } from '../actions';\n\nexport interface StoreState {\n  SoDos: Sodo;\n}\n\nexport const reducers = combineReducers<StoreState>({\n  SoDos: todosReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { Game } from './components/game';\nimport { reducers } from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Game />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}